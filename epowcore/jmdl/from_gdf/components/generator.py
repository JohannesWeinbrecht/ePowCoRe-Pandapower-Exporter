from epowcore.gdf.generators import (
    Generator,
    EPowGenerator,
    SynchronousMachine,
    EPowGeneratorType,
    EPowGeneratorCostModel,
)
from epowcore.gdf.pv_system import PVSystem
from epowcore.jmdl.constants import GENERATOR_CLASS_NAME
from epowcore.jmdl.utils import clean
from epowcore.jmdl.jmdl_model import Block, Data, DataType, Layout, Port


def create_generator_block(
    generator: Generator, ports: list[Port], geo_data: Data, append_uid: bool = False
) -> Block:
    return Block(
        name=f"{clean(generator.name)}_{generator.uid}"
        if append_uid
        else clean(generator.name),
        block_type="BasicBlock",
        block_class=GENERATOR_CLASS_NAME,
        ports=ports,
        comment="",
        url="",
        tags=["Generator"],
        data=Data(
            "",
            DataType.GROUP,
            [
                Data(
                    "",
                    DataType.GROUP,
                    get_generator_data(generator),
                    None,
                    None,
                    "EPowGenerator",
                ),
                geo_data,
            ],
            None,
            None,
            "data",
        ),
        layout=Layout(),
    )


def create_pv_generator_block(
    pv: PVSystem, ports: list[Port], geo_data: Data, append_uid: bool = False
) -> Block:
    return Block(
        name=f"{clean(pv.name)}_{pv.uid}" if append_uid else clean(pv.name),
        block_type="BasicBlock",
        block_class=GENERATOR_CLASS_NAME,
        ports=ports,
        comment="",
        url="",
        tags=["Generator"],
        data=Data(
            "",
            DataType.GROUP,
            [
                Data(
                    "",
                    DataType.GROUP,
                    get_pv_generator_data(pv),
                    None,
                    None,
                    "EPowGenerator",
                ),
                geo_data,
            ],
            None,
            None,
            "data",
        ),
        layout=Layout(),
    )


def get_pv_generator_data(pv: PVSystem) -> list[Data]:
    """Extracts the data from the pv system and returns it as a list of Data objects."""
    return [
        Data(
            "voltage magnitude setpoint.",
            DataType.FLOAT64,
            [],
            1.0,
            None,
            "V",
        ),
        Data(
            "Real Power Output [MW]",
            DataType.FLOAT64,
            [],
            pv.real_power_output,
            None,
            "P",
        ),
        Data(
            "Reactive Power Output [MVar]",
            DataType.FLOAT64,
            [],
            pv.reactive_power_output,
            None,
            "Q",
        ),
        Data(
            "Type of the Generator",
            DataType.ENUM,
            [],
            EPowGeneratorType.PHOTOVOLTAIC.value,
            "edu.kit.iai.easimov.modeler.util.GeneratorType",
            "type",
        ),
        Data("inService", DataType.BOOL, [], True, None, "inService"),
        Data(
            "Minimum Real Power Output [MW]",
            DataType.FLOAT64,
            [],
            pv.minimum_real_power_output,
            None,
            "Pmin",
        ),
        Data(
            "Maximum Real Power Output [MW]",
            DataType.FLOAT64,
            [],
            pv.maximum_real_power_output,
            None,
            "Pmax",
        ),
        Data(
            "Minimum Reactive Power Output [MVar]",
            DataType.FLOAT64,
            [],
            pv.minimum_reactive_power_output,
            None,
            "Qmin",
        ),
        Data(
            "Maximum Reactive Power Output [MVar]",
            DataType.FLOAT64,
            [],
            pv.maximum_reactive_power_output,
            None,
            "Qmax",
        ),
        Data(
            "Total MVA base of the machine, defaults to baseMVA of the network",
            DataType.FLOAT64,
            [],
            pv.rated_power,
            None,
            "baseMVA",
        ),
        Data(
            "Lower real power output of PQ capability curve [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "PC1",
        ),
        Data(
            "Upper real power output of PQ capability curve [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "PC2",
        ),
        Data(
            "Minimum reactive power output at PC1 [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "QC1Min",
        ),
        Data(
            "Maximum reactive power output at PC1 [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "QC1Max",
        ),
        Data(
            "Minimum reactive power output at PC2 [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "QC2Min",
        ),
        Data(
            "Maximum reactive power output at PC2 [MV]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "QC2Max",
        ),
        Data(
            "Ramp rate for load following/AGC [MW/min]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "rampAGC",
        ),
        Data(
            "Ramp rate for 10 minute reserves [MW]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "ramp10",
        ),
        Data(
            "Ramp rate for 30 minute reserves [MW]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "ramp30",
        ),
        Data(
            "Ramp rate for reactive power (2 sec time scale) [MVAr/min]",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "rampQ",
        ),
        Data(
            "Area participation factor",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "APF",
        ),
        Data(
            "None (0), Piecewise linear (1), Polynomial (2)",
            DataType.ENUM,
            [],
            EPowGeneratorCostModel.POLYNOMIAL.value,
            "edu.kit.iai.easimov.modeler.util.GeneratorCostModel",
            "costModel",
        ),
        Data(
            "Generator startup cost in US dollars.",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "costStartUp",
        ),
        Data(
            "Generator shutdown cost in US dollars.",
            DataType.FLOAT64,
            [],
            0.0,
            None,
            "costShutDown",
        ),
        Data(
            "Number of cost parameters",
            DataType.INT64,
            [],
            3,
            None,
            "costNumParameters",
        ),
        Data(
            "Parameters defining total cost function f(p). Units of f and p are $/hr and MW (or MVAr), Piecewise Linear: p0,f0,p1,f1,...,pn,fn, where p0 < p1 < ... < pn. The cost f(p) is defined by the coordinates (p0,f0),(p1,f1),...,(pn,fn). Polymomial: cn, ..., c1, c0. With n+1 coefficients of n-th order polynomial cost, starting with highest order, where cost is f(p) = cnp^n + + c1p + c0",
            DataType.STRING,
            [],
            "0 1 0",
            None,
            "costParameters",
        ),
    ]


def get_generator_data(generator: Generator) -> list[Data]:
    if isinstance(generator, EPowGenerator):
        return [
            Data(
                "voltage magnitude setpoint.",
                DataType.FLOAT64,
                [],
                generator.voltageMagnitudeSetpoint,
                None,
                "V",
            ),
            Data(
                "Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.realPowerOutput,
                None,
                "P",
            ),
            Data(
                "Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.reactivePowerOutput,
                None,
                "Q",
            ),
            Data(
                "Type of the Generator",
                DataType.ENUM,
                [],
                generator.ePowGeneratorType.value,
                "edu.kit.iai.easimov.modeler.util.GeneratorType",
                "type",
            ),
            Data("inService", DataType.BOOL, [], True, None, "inService"),
            Data(
                "Minimum Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.minimumRealPowerOutput,
                None,
                "Pmin",
            ),
            Data(
                "Maximum Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.maximumRealPowerOutput,
                None,
                "Pmax",
            ),
            Data(
                "Minimum Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.minimumReactivePowerOutput,
                None,
                "Qmin",
            ),
            Data(
                "Maximum Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.maximumReactivePowerOutput,
                None,
                "Qmax",
            ),
            Data(
                "Total MVA base of the machine, defaults to baseMVA of the network",
                DataType.FLOAT64,
                [],
                generator.baseMVA,
                None,
                "baseMVA",
            ),
            Data(
                "Lower real power output of PQ capability curve [MV]",
                DataType.FLOAT64,
                [],
                generator.lowerPqCapabilityLimit,
                None,
                "PC1",
            ),
            Data(
                "Upper real power output of PQ capability curve [MV]",
                DataType.FLOAT64,
                [],
                generator.upperPqCapabilityLimit,
                None,
                "PC2",
            ),
            Data(
                "Minimum reactive power output at PC1 [MV]",
                DataType.FLOAT64,
                [],
                generator.pc1MinimumReactivePowerOutput,
                None,
                "QC1Min",
            ),
            Data(
                "Maximum reactive power output at PC1 [MV]",
                DataType.FLOAT64,
                [],
                generator.pc1MaximumReactivePowerOutput,
                None,
                "QC1Max",
            ),
            Data(
                "Minimum reactive power output at PC2 [MV]",
                DataType.FLOAT64,
                [],
                generator.pc2MinimumReactivePowerOutput,
                None,
                "QC2Min",
            ),
            Data(
                "Maximum reactive power output at PC2 [MV]",
                DataType.FLOAT64,
                [],
                generator.pc2MaximumReactivePowerOutput,
                None,
                "QC2Max",
            ),
            Data(
                "Ramp rate for load following/AGC [MW/min]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "rampAGC",
            ),
            Data(
                "Ramp rate for 10 minute reserves [MW]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "ramp10",
            ),
            Data(
                "Ramp rate for 30 minute reserves [MW]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "ramp30",
            ),
            Data(
                "Ramp rate for reactive power (2 sec time scale) [MVAr/min]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "rampQ",
            ),
            Data(
                "Area participation factor",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "APF",
            ),
            Data(
                "None (0), Piecewise linear (1), Polynomial (2)",
                DataType.ENUM,
                [],
                EPowGeneratorCostModel.POLYNOMIAL.value,
                "edu.kit.iai.easimov.modeler.util.GeneratorCostModel",
                "costModel",
            ),
            Data(
                "Generator startup cost in US dollars.",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "costStartUp",
            ),
            Data(
                "Generator shutdown cost in US dollars.",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "costShutDown",
            ),
            Data(
                "Number of cost parameters",
                DataType.INT64,
                [],
                3,
                None,
                "costNumParameters",
            ),
            Data(
                "Parameters defining total cost function f(p). Units of f and p are $/hr and MW (or MVAr), Piecewise Linear: p0,f0,p1,f1,...,pn,fn, where p0 < p1 < ... < pn. The cost f(p) is defined by the coordinates (p0,f0),(p1,f1),...,(pn,fn). Polymomial: cn, ..., c1, c0. With n+1 coefficients of n-th order polynomial cost, starting with highest order, where cost is f(p) = cnp^n + + c1p + c0",
                DataType.STRING,
                [],
                "0 1 0",
                None,
                "costParameters",
            ),
        ]
    elif isinstance(generator, SynchronousMachine):
        return [
            Data(
                "voltage magnitude setpoint.",
                DataType.FLOAT64,
                [],
                generator.voltage_set_point,
                None,
                "V",
            ),
            Data(
                "Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.active_power,
                None,
                "P",
            ),
            Data(
                "Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.reactive_power,
                None,
                "Q",
            ),
            Data(
                "Type of the Generator",
                DataType.ENUM,
                [],
                EPowGeneratorType.OTHERS.value,
                "edu.kit.iai.easimov.modeler.util.GeneratorType",
                "type",
            ),
            Data("inService", DataType.BOOL, [], True, None, "inService"),
            Data(
                "Minimum Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.p_min,
                None,
                "Pmin",
            ),
            Data(
                "Maximum Real Power Output [MW]",
                DataType.FLOAT64,
                [],
                generator.p_max,
                None,
                "Pmax",
            ),
            Data(
                "Minimum Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.q_min,
                None,
                "Qmin",
            ),
            Data(
                "Maximum Reactive Power Output [MVar]",
                DataType.FLOAT64,
                [],
                generator.q_max,
                None,
                "Qmax",
            ),
            Data(
                "Total MVA base of the machine, defaults to baseMVA of the network",
                DataType.FLOAT64,
                [],
                generator.rated_apparent_power,
                None,
                "baseMVA",
            ),
            Data(
                "Lower real power output of PQ capability curve [MV]",
                DataType.FLOAT64,
                [],
                generator.pc1,
                None,
                "PC1",
            ),
            Data(
                "Upper real power output of PQ capability curve [MV]",
                DataType.FLOAT64,
                [],
                generator.pc2,
                None,
                "PC2",
            ),
            Data(
                "Minimum reactive power output at PC1 [MV]",
                DataType.FLOAT64,
                [],
                generator.qc1_min,
                None,
                "QC1Min",
            ),
            Data(
                "Maximum reactive power output at PC1 [MV]",
                DataType.FLOAT64,
                [],
                generator.qc1_max,
                None,
                "QC1Max",
            ),
            Data(
                "Minimum reactive power output at PC2 [MV]",
                DataType.FLOAT64,
                [],
                generator.qc2_min,
                None,
                "QC2Min",
            ),
            Data(
                "Maximum reactive power output at PC2 [MV]",
                DataType.FLOAT64,
                [],
                generator.qc2_max,
                None,
                "QC2Max",
            ),
            Data(
                "Ramp rate for 10 minute reserves [MW]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "ramp10",
            ),
            Data(
                "Ramp rate for 30 minute reserves [MW]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "ramp30",
            ),
            Data(
                "Ramp rate for reactive power (2 sec time scale) [MVAr/min]",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "rampQ",
            ),
            Data(
                "Area participation factor",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "APF",
            ),
            Data(
                "None (0), Piecewise linear (1), Polynomial (2)",
                DataType.ENUM,
                [],
                EPowGeneratorCostModel.POLYNOMIAL.value,
                "edu.kit.iai.easimov.modeler.util.GeneratorCostModel",
                "costModel",
            ),
            Data(
                "Generator startup cost in US dollars.",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "costStartUp",
            ),
            Data(
                "Generator shutdown cost in US dollars.",
                DataType.FLOAT64,
                [],
                0.0,
                None,
                "costShutDown",
            ),
            Data(
                "Number of cost parameters",
                DataType.INT64,
                [],
                3,
                None,
                "costNumParameters",
            ),
            Data(
                "Parameters defining total cost function f(p). Units of f and p are $/hr and MW (or MVAr), Piecewise Linear: p0,f0,p1,f1,...,pn,fn, where p0 < p1 < ... < pn. The cost f(p) is defined by the coordinates (p0,f0),(p1,f1),...,(pn,fn). Polymomial: cn, ..., c1, c0. With n+1 coefficients of n-th order polynomial cost, starting with highest order, where cost is f(p) = cnp^n + + c1p + c0",
                DataType.STRING,
                [],
                "0 1 0",
                None,
                "costParameters",
            ),
        ]
    return []
